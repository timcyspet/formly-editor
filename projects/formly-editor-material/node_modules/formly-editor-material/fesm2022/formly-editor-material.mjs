import * as i0 from '@angular/core';
import { Injectable, Component, importProvidersFrom } from '@angular/core';
import * as i1 from '@ngx-formly/core';
import { FieldWrapper, FormlyModule, FieldArrayType } from '@ngx-formly/core';
import { MatCard, MatCardHeader, MatCardTitle, MatCardContent } from '@angular/material/card';
import { MatIconButton, MatButton } from '@angular/material/button';
import { MatIcon } from '@angular/material/icon';

class FormlyEditorMaterialService {
    constructor() { }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FormlyEditorMaterialService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FormlyEditorMaterialService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FormlyEditorMaterialService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });

class FormlyEditorMaterialComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FormlyEditorMaterialComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.0.1", type: FormlyEditorMaterialComponent, isStandalone: true, selector: "lib-FormlyEditorMaterial", ngImport: i0, template: `
    <p>
      formly-editor-material works!
    </p>
  `, isInline: true, styles: [""] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: FormlyEditorMaterialComponent, decorators: [{
            type: Component,
            args: [{ selector: 'lib-FormlyEditorMaterial', standalone: true, imports: [], template: `
    <p>
      formly-editor-material works!
    </p>
  ` }]
        }] });

class CardWrapperComponent extends FieldWrapper {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: CardWrapperComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.0.1", type: CardWrapperComponent, isStandalone: true, selector: "app-card-wrapper", usesInheritance: true, ngImport: i0, template: "<mat-card>\r\n    <mat-card-header>\r\n        @if (to.cardTitle) {\r\n            <mat-card-title>{{ to.cardTitle }}</mat-card-title>\r\n        }\r\n    </mat-card-header>\r\n    <mat-card-content><ng-container #fieldComponent></ng-container></mat-card-content>\r\n</mat-card>\r\n", dependencies: [{ kind: "component", type: MatCard, selector: "mat-card", inputs: ["appearance"], exportAs: ["matCard"] }, { kind: "component", type: MatCardHeader, selector: "mat-card-header" }, { kind: "directive", type: MatCardTitle, selector: "mat-card-title, [mat-card-title], [matCardTitle]" }, { kind: "directive", type: MatCardContent, selector: "mat-card-content" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: CardWrapperComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-card-wrapper', standalone: true, imports: [MatCard, MatCardHeader, MatCardTitle, MatCardContent], template: "<mat-card>\r\n    <mat-card-header>\r\n        @if (to.cardTitle) {\r\n            <mat-card-title>{{ to.cardTitle }}</mat-card-title>\r\n        }\r\n    </mat-card-header>\r\n    <mat-card-content><ng-container #fieldComponent></ng-container></mat-card-content>\r\n</mat-card>\r\n" }]
        }] });

function provideCardWrapper() {
    return importProvidersFrom([
        FormlyModule.forChild({
            wrappers: [
                {
                    name: 'card',
                    component: CardWrapperComponent,
                },
            ],
        }),
    ]);
}

class RepeatingSectionTypeComponent extends FieldArrayType {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RepeatingSectionTypeComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.0.1", type: RepeatingSectionTypeComponent, isStandalone: true, selector: "app-repeating-section-type", usesInheritance: true, ngImport: i0, template: "@if (props.label) {\r\n    <legend>{{ props.label }}</legend>\r\n}\r\n@if (props.description) {\r\n    <p>{{ props.description }}</p>\r\n}\r\n\r\n@for (field of field.fieldGroup; track field; let i = $index) {\r\n    <div style=\"display: flex; align-items: baseline\">\r\n        <formly-field\r\n            style=\"flex-grow: 1\"\r\n            [field]=\"field\"\r\n        ></formly-field>\r\n        <button\r\n            mat-icon-button\r\n            color=\"warn\"\r\n            (click)=\"remove(i)\"\r\n        >\r\n            <mat-icon>remove</mat-icon>\r\n        </button>\r\n    </div>\r\n}\r\n<div style=\"margin: 16px 0\">\r\n    <button\r\n        mat-flat-button\r\n        color=\"primary\"\r\n        (click)=\"add()\"\r\n    >\r\n        {{ props.addText }}\r\n    </button>\r\n</div>\r\n", dependencies: [{ kind: "ngmodule", type: FormlyModule }, { kind: "component", type: i1.FormlyField, selector: "formly-field", inputs: ["field"] }, { kind: "component", type: MatIconButton, selector: "button[mat-icon-button]", exportAs: ["matButton"] }, { kind: "component", type: MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: MatButton, selector: "    button[mat-button], button[mat-raised-button], button[mat-flat-button],    button[mat-stroked-button]  ", exportAs: ["matButton"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.1", ngImport: i0, type: RepeatingSectionTypeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-repeating-section-type', standalone: true, imports: [FormlyModule, MatIconButton, MatIcon, MatButton], template: "@if (props.label) {\r\n    <legend>{{ props.label }}</legend>\r\n}\r\n@if (props.description) {\r\n    <p>{{ props.description }}</p>\r\n}\r\n\r\n@for (field of field.fieldGroup; track field; let i = $index) {\r\n    <div style=\"display: flex; align-items: baseline\">\r\n        <formly-field\r\n            style=\"flex-grow: 1\"\r\n            [field]=\"field\"\r\n        ></formly-field>\r\n        <button\r\n            mat-icon-button\r\n            color=\"warn\"\r\n            (click)=\"remove(i)\"\r\n        >\r\n            <mat-icon>remove</mat-icon>\r\n        </button>\r\n    </div>\r\n}\r\n<div style=\"margin: 16px 0\">\r\n    <button\r\n        mat-flat-button\r\n        color=\"primary\"\r\n        (click)=\"add()\"\r\n    >\r\n        {{ props.addText }}\r\n    </button>\r\n</div>\r\n" }]
        }] });

function provideRepeatingSectionType() {
    return importProvidersFrom([
        FormlyModule.forChild({
            types: [
                {
                    name: 'repeating-section',
                    component: RepeatingSectionTypeComponent,
                },
            ],
        }),
    ]);
}

/*
 * Public API Surface of formly-editor-material
 */

/**
 * Generated bundle index. Do not edit.
 */

export { CardWrapperComponent, FormlyEditorMaterialComponent, FormlyEditorMaterialService, RepeatingSectionTypeComponent, provideCardWrapper, provideRepeatingSectionType };
//# sourceMappingURL=formly-editor-material.mjs.map
